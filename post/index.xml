<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 창욱&#39;s 공부방</title>
    <link>https://changwookyang.github.io/post/</link>
    <description>Recent content in Posts on 창욱&#39;s 공부방</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 10 Jul 2020 00:32:21 +0900</lastBuildDate>
    
	<atom:link href="https://changwookyang.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Backtracking 알고리즘</title>
      <link>https://changwookyang.github.io/post/backtracking/</link>
      <pubDate>Fri, 10 Jul 2020 00:32:21 +0900</pubDate>
      
      <guid>https://changwookyang.github.io/post/backtracking/</guid>
      <description>Backtracking 이란? 어떤 노드의 유망성 점검 후, 유망하지 않으면 그 노드의 부모노드로 되돌아간 후 다른 자손노드를 검색
KEYWORD ! &amp;ldquo;배제&amp;rdquo;, &amp;ldquo;풀이 시간 단축&amp;rdquo;
유망하지 않으면 배제를 하고 부모노드로 되돌아가면서 풀이 시간을 단축!!
Backtracking의 가장 유명한 예제 중 하나인 4-Queens Problem!
4-Queens Problem은 4개의 Queen을 서로 상대방을 위협하지 않도록 4*4 체스판에 위치시키는 문제이다.
좌측최상단이 (1,1)이다.
)
되추적은 깊이우선탐색(Depth-First Search)과 마찬가지로 스택을 사용한다!
깊이우선탐색은 (1,1) 노도의 자식인 (2,1),(2,2),(2,3),(2,4)를 스택에 넣을 것이다.
하지만!! 되추적은 (2,1),(2,2)를 스택에 넣지 않는다.</description>
    </item>
    
    <item>
      <title>창욱 Study Blog!</title>
      <link>https://changwookyang.github.io/post/test/</link>
      <pubDate>Wed, 08 Jul 2020 00:32:41 +0900</pubDate>
      
      <guid>https://changwookyang.github.io/post/test/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Spring Framework(1)</title>
      <link>https://changwookyang.github.io/post/spring/</link>
      <pubDate>Wed, 08 Jul 2020 00:32:21 +0900</pubDate>
      
      <guid>https://changwookyang.github.io/post/spring/</guid>
      <description>Spring 프래임워크란? IoC와 AOP를 지원하는 경량의 컨테이너 프레임워크 - 경량(두 가지 이유)  1. 모듈들이 jar파일로 묶여있다.2. POJO(Plain Old Java Object) 지원하여 형식 제약이 없다ex) Servlet 같은 경우는 doGet, doPost 등의 제약이 있는 것이 차이점 - 컨테이너  객체의 인스턴스 생성, 생명주기를 관리프로그래머가 작성한 코드를 스스로 참조한 뒤 알아서 객체의 생성과 소멸을 컨트롤해준다. - IoC(Inversion of Conversion, 제어의 역행)  Dependency Injection을 제공!ex) 다음 코드를 스프링으로 설정할 수 있다.</description>
    </item>
    
  </channel>
</rss>